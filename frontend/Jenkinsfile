pipeline {
    agent any

    triggers {
        githubPush()
    }

    environment {
        DOCKER_HOST = 'unix:///var/run/docker.sock'
        FRONTEND_DIR = "${WORKSPACE}/frontend"
        TARGET_URL = "http://52.71.206.133/" // Ganti dengan URL target Anda
    }

    stages {
        stage('Checkout') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '*/dev-novan']],
                    extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'frontend']],
                    userRemoteConfigs: [[
                        url: 'https://github.com/dipt4aaaa/Dishcovery_Capstone.git',
                    ]]
                ])
            }
        }

        stage('Health Check with Curl') {
            steps {
                script {
                    // Cek ketersediaan endpoint
                    def response = sh(returnStdout: true, script: "curl -s -o /dev/null -w '%{http_code}' ${TARGET_URL} || true").trim()
                    
                    if (response != "200") {
                        error("Health check failed! HTTP Status: ${response}")
                    } else {
                        echo "Health check passed! Service is running"
                    }
                }
            }
        }

        stage('Build Frontend') {
            steps {
                dir('frontend') {
                    sh 'docker-compose build frontend'
                }
            }
        }

        stage('Deploy Frontend') {
            steps {
                dir('frontend') {
                    sh 'docker-compose up -d --no-deps frontend'
                }
            }
        }

        stage('Post-Deploy Check') {
            steps {
                script {
                    sleep(time: 30, unit: 'SECONDS') // Tunggu service ready
                    def deployCheck = sh(returnStdout: true, script: "curl -s -o /dev/null -w '%{http_code}' ${TARGET_URL} || true").trim()
                    
                    if (deployCheck != "200") {
                        error("Post-deploy check failed! HTTP Status: ${deployCheck}")
                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
        success {
            slackSend(color: 'good', message: "Frontend deployed successfully: ${env.BUILD_URL} | Service available at ${TARGET_URL}")
        }
        failure {
            slackSend(color: 'danger', message: "Deployment failed: ${env.BUILD_URL} | Last status: ${deployCheck ?: 'N/A'}")
        }
    }
}