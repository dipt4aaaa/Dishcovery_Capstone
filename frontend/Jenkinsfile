pipeline {
    agent any

    triggers {
        githubPush()
    }

    environment {
        DOCKER_HOST = 'unix:///var/run/docker.sock'
        FRONTEND_DIR = "${WORKSPACE}/frontend"
        TARGET_URL = "http://52.71.206.133"
        DEPLOY_STATUS = ""
    }

    stages {
        stage('Checkout') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '*/dev-novan']],
                    extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'frontend']],
                    userRemoteConfigs: [[
                        url: 'https://github.com/dipt4aaaa/Dishcovery_Capstone.git'
                    ]]
                ])
            }
        }

        stage('Pre-Deploy Health Check') {
            steps {
                script {
                    def response = sh(
                        returnStdout: true, 
                        script: "curl -s -o /dev/null -w '%{http_code}' --connect-timeout 10 --max-time 30 ${TARGET_URL} || echo '000'"
                    ).trim()

                    echo "Current service status: HTTP ${response}"
                    if (response == "200") {
                        echo "Service is currently running and healthy"
                    } else {
                        echo "Service is not responding or unhealthy (Status: ${response})"
                    }
                }
            }
        }

        stage('Stop Conflicting Containers') {
            steps {
                sh '''
                echo "Checking for containers using port 80..."

                CONTAINERS_ON_PORT_80=$(docker ps --filter "publish=80" -q)
                if [ ! -z "$CONTAINERS_ON_PORT_80" ]; then
                    echo "Found containers using port 80, stopping them..."
                    docker stop $CONTAINERS_ON_PORT_80 || true
                    docker rm $CONTAINERS_ON_PORT_80 || true
                fi

                docker stop dishcovery_capstone_frontend_1 || true
                docker rm dishcovery_capstone_frontend_1 || true

                echo "Port 80 cleanup completed"
                '''
            }
        }

        stage('Build Frontend') {
            steps {
                dir('frontend') {
                    script {
                        def buildStatus = sh(returnStatus: true, script: '''
                            echo "Building frontend image..."
                            docker-compose build --no-cache frontend

                            echo "Verifying built image..."
                            docker images | grep frontend || exit 1
                        ''')
                        if (buildStatus != 0) {
                            error("Frontend build failed")
                        }
                    }
                }
            }
        }

        stage('Deploy Frontend') {
            steps {
                dir('frontend') {
                    script {
                        def deployStatus = sh(returnStatus: true, script: '''
                            echo "Starting frontend deployment..."

                            docker-compose stop frontend || true
                            docker-compose rm -f frontend || true

                            sleep 5

                            docker-compose up -d --no-deps frontend

                            sleep 10
                            docker-compose ps frontend | grep -q "Up"
                        ''')

                        if (deployStatus == 0) {
                            DEPLOY_STATUS = "SUCCESS"
                            echo "Frontend container started successfully"
                        } else {
                            DEPLOY_STATUS = "FAILED"
                            echo "Frontend deployment failed, collecting logs..."

                            sh '''
                            echo "=== DEPLOYMENT FAILURE DEBUG ==="
                            docker ps -a
                            docker-compose ps
                            docker-compose logs frontend || true
                            ss -tlnp | grep :80 || true
                            '''
                            error("Frontend deployment failed")
                        }
                    }
                }
            }
        }

        stage('Post-Deploy Verification') {
            steps {
                script {
                    echo "Waiting for service to be ready..."
                    sleep 30

                    def success = false
                    for (int i = 1; i <= 5; i++) {
                        def status = sh(
                            returnStdout: true,
                            script: "curl -s -o /dev/null -w '%{http_code}' --connect-timeout 10 --max-time 30 ${TARGET_URL} || echo '000'"
                        ).trim()

                        echo "Attempt ${i}/5: HTTP Status ${status}"

                        if (status == "200") {
                            success = true
                            DEPLOY_STATUS = "VERIFIED"
                            break
                        }

                        if (i < 5) {
                            echo "Waiting 15 seconds before retry..."
                            sleep 15
                        }
                    }

                    if (!success) {
                        DEPLOY_STATUS = "UNVERIFIED"
                        echo "⚠️ Service not verified, capturing logs..."
                        sh '''
                        docker-compose ps frontend
                        docker-compose logs --tail=50 frontend
                        '''
                    }
                }
            }
        }
    }

    post {
        always {
            script {
                sh '''
                echo "=== FINAL DEPLOYMENT STATUS ==="
                docker ps | grep frontend || echo "No frontend containers running"
                ss -tlnp | grep :80 || echo "Port 80 not in use"
                '''
            }
            cleanWs()
        }

        success {
            script {
                def message = "✅ Frontend deployed successfully: ${env.BUILD_URL}"
                if (DEPLOY_STATUS == "VERIFIED") {
                    message += " | ✅ Service verified at ${TARGET_URL}"
                } else {
                    message += " | ⚠️ Service deployed but verification pending at ${TARGET_URL}"
                }

                try {
                    slackSend(color: 'good', message: message)
                } catch (err) {
                    echo "Slack notification failed: ${err.getMessage()}"
                }
            }
        }

        failure {
            script {
                def message = "❌ Frontend deployment failed: ${env.BUILD_URL} | Status: ${DEPLOY_STATUS ?: 'UNKNOWN'}"
                try {
                    slackSend(color: 'danger', message: message)
                } catch (err) {
                    echo "Slack notification failed: ${err.getMessage()}"
                }
            }
        }
    }
}
